# -*- coding: utf-8 -*-
"""mask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kp4x7Lvf-iDFVSH_DJSo5847tKkEC70A
"""

import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import confusion_matrix, accuracy_score

train_datagen = ImageDataGenerator(rescale = 1/.255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip= True)
training_set = train_datagen.flow_from_directory('/content/drive/MyDrive/data/train',
                                                 target_size = (100,100),
                                                 batch_size = 32,
                                                 class_mode = 'binary')

test_datagen = ImageDataGenerator(rescale = 1/.255,)
test_set = train_datagen.flow_from_directory('/content/drive/MyDrive/New Masks Dataset/Test',
                                                 target_size = (100,100),
                                                 batch_size = 32,
                                                 class_mode = 'binary')



model = tf.keras.applications.resnet50.ResNet50(
    include_top=False,
    weights='imagenet',
    input_shape=(100,100,3),
    pooling=None,
    classes=1000,
)

model.summary()

model.trainable = False

cnn = tf.keras.models.Sequential()

cnn.add(model)

cnn.add(tf.keras.layers.Flatten())

cnn.add(tf.keras.layers.Dense(units=128, activation ='relu'))

cnn.add(tf.keras.layers.Dropout(0.1))

cnn.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

cnn.compile(optimizer='adam', loss ='binary_crossentropy', metrics=['accuracy'])

cnn.summary()

cnn.fit(x = training_set, validation_data=test_set, epochs =50)

score = cnn.evaluate( test_set, verbose=0)
print("Model loss :" ,score[0])
print("Model accuracy :" ,score[1])

test_set.classes

y_pred = cnn.predict(test_set)
y_pred = y_pred > 0.5
y_pred = np.round(y_pred)
cm = confusion_matrix( test_set.classes, y_pred)
print(cm)
print(accuracy_score(test_set.classes, y_pred))

import numpy as np
from keras.preprocessing import image
img_path = '/content/drive/MyDrive/latin-man-mockup-psd-wearing-face-mask-new-normal_53876-143275.webp'
img = tf.keras.utils.load_img(img_path, target_size=(100,100))
plt.imshow(img)
plt.show()

test_image = tf.keras.utils.load_img(img_path, target_size = (100,100))
#convert image format into array

test_image = tf.keras.utils.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
result = cnn.predict(test_image)
training_set.class_indices
if result[0][0] == 1:
  prediction = ' no mask'
else:
  prediction = 'mask is there'

print(prediction)

import numpy as np
from keras.preprocessing import image

img_path = '/content/drive/MyDrive/Selena-Gomez-2010.webp'
img = tf.keras.utils.load_img(img_path, target_size=(100,100))
plt.imshow(img)
plt.show()

test_image = tf.keras.utils.load_img(img_path, target_size = (100,100))
#convert image format into array

test_image = tf.keras.utils.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
result = cnn.predict(test_image)
training_set.class_indices
if result[0][0] == 1:
  prediction = ' mask'
else:
  prediction = 'no mask'

print(prediction)

